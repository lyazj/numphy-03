#!/usr/bin/env python3

import matplotlib.pyplot as plt
import numpy as np
from atof import atof

x0 = atof('0x1.e53f1cbeaa9bcp+0')

colors = ['blue', 'orange', 'green']
data = {}
with open('solve-equ.out') as equ:
    for line in equ:
        label, values = line.split(':')
        values = list(map(atof, values.split()))
        if label not in data:
            data[label] = [values]
        else:
            data[label].append(values)
data = {k: np.array(v) for (k, v) in data.items()}
for label, value in data.items():
    print(label, ': ', value.shape[0], ' iterations', sep='')
    print(value)

plt.title('unary function solving processes')
plt.xlabel('iterations')
plt.ylabel(r'$|x - x_0|$')
plt.yscale('log')
for color, (label, value) in zip(colors, data.items()):
    for i in range(value.shape[1]):
        plt.plot(*zip(*enumerate(np.abs(value[:,i] - x0))), color=color, label=label + ('' if value.shape[1] == 1 else '-' + str(i + 1)))
plt.legend()
plt.savefig(__file__ + '.pdf')
plt.show()
